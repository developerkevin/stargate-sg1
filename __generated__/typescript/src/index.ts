
// Code generated by @open-rpc/client-generator DO NOT EDIT.
import { RequestManager, WebSocketTransport, HTTPTransport, Client, JSONRPCError } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator, MethodNotFoundError } from "@open-rpc/schema-utils-js";

/**
 * chain name, by default etc, other possible variant morden.
 */
export type Chain = "etc" | "morden";
/**
 * Chain id number, by default for mainnet it equals 61.
 */
export type ChainId = number;
/**
 * show hidden accounts
 */
export type ShowHidden = boolean;
export interface AdditionalParams {
  chain?: Chain;
  chain_id?: ChainId;
  show_hidden?: ShowHidden;
  [k: string]: any;
}
export type Address = string;
/**
 * account name
 */
export type AccountName = string;
/**
 * account description
 */
export type AccountDescription = string;
/**
 * passphrase used to encode keyfile (recommend to use 8+ words with good entropy)
 */
export type Passphrase = string;
export interface NewAccount {
  name?: AccountName;
  description?: AccountDescription;
  passphrase?: Passphrase;
  [k: string]: any;
}
export type ArrayFGWP0Dez = any[];
export interface ObjectT2TfH8WI {
  EIP712Domain: ArrayFGWP0Dez;
  [k: string]: Array<{
    name: string;
    type: string;
    [k: string]: any;
  }>;
}
export type StringWxzVcTo3 = string;
export interface ObjectPA3DZnDb {
  [k: string]: any;
}
export interface ObjectMNLihJk6 {
  types: ObjectT2TfH8WI;
  primaryType: StringWxzVcTo3;
  domain: ObjectPA3DZnDb;
  message: ObjectPA3DZnDb;
  [k: string]: any;
}
/**
 * The gas limit provided by the sender in Wei
 */
export type Gas = string;
/**
 * The gas price willing to be paid by the sender in Wei
 */
export type GasPrice = string;
/**
 * The data field sent with the transaction
 */
export type Data = string;
/**
 * The total number of prior transactions made by the sender
 */
export type Nonce = string;
/**
 * Value of Ether being transferred in Wei
 */
export type Wei = string;
export interface Transaction {
  from: Address;
  gas: Gas;
  gasPrice: GasPrice;
  data?: Data;
  nonce: Nonce;
  to: Address;
  value?: Wei;
  [k: string]: any;
}
export type NumberYqdpe1HS = number;
export type Iv = string;
export interface ObjectEmFzrPeu {
  iv?: Iv;
  [k: string]: any;
}
export type Dklen = number;
export interface ObjectUOYzh4QK {
  dklen?: Dklen;
  salt?: StringWxzVcTo3;
  n?: NumberYqdpe1HS;
  r?: NumberYqdpe1HS;
  p?: NumberYqdpe1HS;
  [k: string]: any;
}
export interface Crypto {
  ciphertext?: StringWxzVcTo3;
  cipherparams?: ObjectEmFzrPeu;
  cipher?: StringWxzVcTo3;
  kdf?: StringWxzVcTo3;
  kdfparams?: ObjectUOYzh4QK;
  mac?: StringWxzVcTo3;
  [k: string]: any;
}
export interface Keyfile {
  version?: NumberYqdpe1HS;
  id?: StringWxzVcTo3;
  address?: StringWxzVcTo3;
  crypto?: Crypto;
  [k: string]: any;
}
/**
 * a list of 24 words
 */
export type Mnemonic = string;
export type MnemonicName = string;
export type MnemonicDescription = string;
export type MnemonicHDPath = string;
export interface ObjectHVZiygN0 {
  mnemonic: Mnemonic;
  name?: MnemonicName;
  description?: MnemonicDescription;
  passphrase: Passphrase;
  hd_path: MnemonicHDPath;
  [k: string]: any;
}
export type HexString = string;
export type AccountIsHidden = boolean;
export interface UnknownXWwH5ALX {
  address: Address;
  name: AccountName;
  description: AccountDescription;
  is_hidden: AccountIsHidden;
  [k: string]: any;
}
export type Accounts = UnknownXWwH5ALX[];
export type AccountExists = boolean;
export type SignerListAccounts = (additional?: AdditionalParams) => Promise<Accounts>;
export type SignerHideAccount = (address: Address, additional?: AdditionalParams) => Promise<AccountExists>;
export type SignerUnhideAccount = (address: Address, additional?: AdditionalParams) => Promise<AccountExists>;
export type SignerNewAccount = (newAccount?: NewAccount, additional?: AdditionalParams) => Promise<Address>;
export type SignerSignTypedData = (address: Address, TypedData: ObjectMNLihJk6, passphrase: Passphrase, additional?: AdditionalParams) => Promise<HexString>;
export type SignerSignTransaction = (transaction: Transaction, passphrase: Passphrase, additional?: AdditionalParams) => Promise<HexString>;
export type SignerImportAccount = (keyfile?: Keyfile, additional?: AdditionalParams) => Promise<Address>;
export type SignerGenerateMnemonic = () => Promise<Mnemonic>;
export type SignerImportMnemonic = (importMnemonicOptions?: ObjectHVZiygN0, additional?: AdditionalParams) => Promise<Address>;
export type SignerExportAccount = (address: Address, additional?: AdditionalParams) => Promise<Keyfile>;
export type SignerSign = (dataToSign?: HexString, address: Address, passphrase?: Passphrase, additional?: AdditionalParams) => Promise<HexString>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https";
    host: string;
    port: number;
    path?: string;
  };
}

export class JadeSignerJSONRPCAPI {
  public static openrpcDocument: OpenRPC = {"openrpc": "1.0.0", "info": {"version": "0.1.0", "title": "Jade Signer JSON-RPC API", "description": "Jade Signer JSON-RPC lets you manage keys and sign transactions and messages offline for any EVM-based blockchain.", "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"url": "http://localhost:1920"}], "methods": [{"name": "signer_listAccounts", "summary": "Return the list of all not hidden (by default) accounts from the keystore", "params": [{"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "accounts", "description": "List of all not hidden accounts", "schema": {"title": "accounts", "type": "array", "items": {"required": ["name", "description", "address", "is_hidden"], "properties": {"address": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "name": {"title": "accountName", "type": "string"}, "description": {"title": "accountDescription", "type": "string"}, "is_hidden": {"title": "accountIsHidden", "type": "boolean"}}}}}}, {"name": "signer_hideAccount", "summary": "Hide an account from the list returned by default by `signer_listAccounts`", "params": [{"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "hideAccountResult", "description": "`true` if required account exists", "schema": {"title": "AccountExists", "type": "boolean"}}}, {"name": "signer_unhideAccount", "summary": "Show an account that was hidden before by the command `signer_hideAccount`", "params": [{"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "unhideAccountResult", "description": "`accept` (Boolean) - `true` if required account exists", "schema": {"title": "AccountExists", "type": "boolean"}}}, {"name": "signer_newAccount", "summary": "Creates a new account and stores it locally as a passphrase-encoded keystore file.", "params": [{"name": "newAccount", "description": "Creates a new account and stores it locally as a passphrase-encoded keystore file.", "schema": {"title": "newAccount", "type": "object", "properties": {"name": {"title": "accountName", "description": "account name", "type": "string"}, "description": {"title": "accountDescription", "description": "account description", "type": "string"}, "passphrase": {"title": "passphrase", "description": "passphrase used to encode keyfile (recommend to use 8+ words with good entropy)", "type": "string"}}}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, "examples": [{"name": "newAccountExample", "description": "Example of creating a new account", "params": [{"name": "testAccount", "value": {"name": "my test wallet", "description": "my test wallet description", "passphrase": "baz"}}, {"name": "additionalExample", "value": {"chain": "etc"}}], "result": {"name": "newAccountResultExample", "value": "0x90ee510fb88ea47a84b45a6d983a0bc6b193e385"}}]}, {"name": "signer_signTypedData", "description": "The sign method calculates an Ethereum specific signature with: sign(keccak256(\"\\x19Ethereum Signed Message:\n\" + len(message) + message))).", "summary": "hashing and signing of typed structured data", "params": [{"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, {"name": "TypedData", "description": "Typed data is a JSON object containing type information, domain separator parameters and the message object. ", "summary": "Typed structured data to be signed.", "required": true, "schema": {"type": "object", "properties": {"types": {"type": "object", "properties": {"EIP712Domain": {"type": "array"}}, "additionalProperties": {"type": "array", "items": {"type": "object", "properties": {"name": {"type": "string"}, "type": {"type": "string"}}, "required": ["name", "type"]}}, "required": ["EIP712Domain"]}, "primaryType": {"type": "string"}, "domain": {"type": "object"}, "message": {"type": "object"}}, "required": ["types", "primaryType", "domain", "message"]}}, {"name": "passphrase", "required": true, "description": "passphrase to keyfile", "summary": "keyfile passphrase", "schema": {"title": "passphrase", "description": "passphrase used to encode keyfile (recommend to use 8+ words with good entropy)", "type": "string"}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "signedTransaction", "description": "Hex-encoded signed raw transaction data", "schema": {"title": "hexString", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}}}, {"name": "signer_signTransaction", "summary": "Signs transaction offline with private key from keystore file with given from address and passphrase.", "params": [{"name": "transaction", "description": "transaction to sign", "summary": "transaction", "required": true, "schema": {"title": "transaction", "type": "object", "required": ["from", "to", "gas", "gasPrice", "nonce"], "properties": {"from": {"description": "Address of the sender", "title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "gas": {"title": "gas", "type": "string", "pattern": "^0x[a-fA-F0-9]+$", "description": "The gas limit provided by the sender in Wei"}, "gasPrice": {"title": "gasPrice", "type": "string", "pattern": "^0x[a-fA-F0-9]+$", "description": "The gas price willing to be paid by the sender in Wei"}, "data": {"title": "data", "type": "string", "pattern": "^0x[a-fA-F0-9]+$", "description": "The data field sent with the transaction"}, "nonce": {"title": "nonce", "description": "The total number of prior transactions made by the sender", "pattern": "^0x[a-fA-F0-9]+$", "type": "string"}, "to": {"description": "address of the receiver. null when its a contract creation transaction", "title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "value": {"description": "Value of Ether being transferred in Wei", "title": "wei", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}}}}, {"name": "passphrase", "required": true, "description": "passphrase to keyfile", "summary": "keyfile passphrase", "schema": {"title": "passphrase", "description": "passphrase used to encode keyfile (recommend to use 8+ words with good entropy)", "type": "string"}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "signedTransaction", "description": "Hex-encoded signed raw transaction data", "schema": {"title": "hexString", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}}}, {"name": "signer_importAccount", "summary": "Import an account", "description": "Import a new account from an external keyfile. should comply with the [Web3 Secret Storage Definition](https://github.com/ethereumproject/wiki/wiki/Web3-Secret-Storage-Definition)", "params": [{"name": "keyfile", "summary": "keyfile - secret storage", "description": "keyfile in json format that MUST comply with the [Web3 Secret Storage Definition](https://github.com/ethereumproject/wiki/wiki/Web3-Secret-Storage-Definition)", "schema": {"title": "keyfile", "type": "object", "properties": {"version": {"type": "number"}, "id": {"type": "string"}, "address": {"type": "string"}, "crypto": {"title": "crypto", "type": "object", "properties": {"ciphertext": {"type": "string"}, "cipherparams": {"type": "object", "properties": {"iv": {"title": "iv", "type": "string"}}}, "cipher": {"type": "string"}, "kdf": {"type": "string"}, "kdfparams": {"type": "object", "properties": {"dklen": {"title": "dklen", "type": "number"}, "salt": {"type": "string"}, "n": {"type": "number"}, "r": {"type": "number"}, "p": {"type": "number"}}}, "mac": {"type": "string"}}}}}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}}, {"name": "signer_generateMnemonic", "summary": "Generate a mnemonic phrase", "description": "Generates a new 24 words long mnemonic phrase", "params": [], "result": {"name": "mnemonicPhrase", "description": "Mnemonic phrase is a list of 24 words", "schema": {"title": "mnemonic", "type": "string", "description": "a list of 24 words"}}}, {"name": "signer_importMnemonic", "summary": "Import a mnemonic phrase", "description": "Creates a new account from a mnemonic and stores it locally as a passphrase-encoded keystore file.", "params": [{"name": "importMnemonicOptions", "schema": {"type": "object", "required": ["mnemonic", "passphrase", "hd_path"], "properties": {"mnemonic": {"title": "mnemonic", "type": "string", "description": "a list of 24 words"}, "name": {"title": "mnemonicName", "type": "string"}, "description": {"title": "mnemonicDescription", "type": "string"}, "passphrase": {"title": "passphrase", "description": "passphrase used to encode keyfile (recommend to use 8+ words with good entropy)", "type": "string"}, "hd_path": {"title": "mnemonicHDPath", "type": "string"}}}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, "examples": [{"name": "importMnemonicExample", "description": "example of importing a mnemonic phrase", "params": [{"name": "importMnemonicOptionsExample", "description": "example of import mnemonic options", "value": {"name": "my imported wallet", "description": "my imported wallet description", "passphrase": "baz", "hd_path": "m/44/60/160720/0", "mnemonic": "icon suggest road current ripple engage spell clay route large arena climb oxygen electric cupboard dream title immune fit beyond mouse slab bronze salad"}}, {"name": "additionalParamsExample", "description": "example of additional params for mnemonic import", "value": {"chain": "etc"}}], "result": {"name": "importMnemonicResultExample", "description": "example of import mnemonic result", "value": "0xa0dfb14b391590faff0d6b37bf2916f27cd15a28"}}]}, {"name": "signer_exportAccount", "summary": "Export an account", "description": "Export a keyfile associated with account. Keyfile uses the [Web3 Secret Storage Definition](https://github.com/ethereumproject/wiki/wiki/Web3-Secret-Storage-Definition)", "params": [{"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "keyfile", "summary": "keyfile - secret storage", "description": "keyfile in json format that MUST comply with the [Web3 Secret Storage Definition](https://github.com/ethereumproject/wiki/wiki/Web3-Secret-Storage-Definition)", "schema": {"title": "keyfile", "type": "object", "properties": {"version": {"type": "number"}, "id": {"type": "string"}, "address": {"type": "string"}, "crypto": {"title": "crypto", "type": "object", "properties": {"ciphertext": {"type": "string"}, "cipherparams": {"type": "object", "properties": {"iv": {"title": "iv", "type": "string"}}}, "cipher": {"type": "string"}, "kdf": {"type": "string"}, "kdfparams": {"type": "object", "properties": {"dklen": {"title": "dklen", "type": "number"}, "salt": {"type": "string"}, "n": {"type": "number"}, "r": {"type": "number"}, "p": {"type": "number"}}}, "mac": {"type": "string"}}}}}}}, {"name": "signer_sign", "summary": "Sign a message", "description": "Calculates an Ethereum-specific signature in the form of keccak256(\"\\x19Ethereum Signed Message:\n\" + len(message) + message))", "params": [{"name": "dataToSign", "description": "data to sign", "summary": "sign data", "schema": {"title": "hexString", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}}, {"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, {"name": "passphrase", "description": "passphrase to keyfile", "schema": {"title": "passphrase", "description": "passphrase used to encode keyfile (recommend to use 8+ words with good entropy)", "type": "string"}}, {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}], "result": {"name": "signedMessageData", "description": "signature hash of the provided data", "schema": {"title": "hexString", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}}}], "components": {"schemas": {"AccountExists": {"title": "AccountExists", "type": "boolean"}, "Address": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "Additional": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}, "Account": {"required": ["name", "description", "address", "is_hidden"], "properties": {"address": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "name": {"title": "accountName", "type": "string"}, "description": {"title": "accountDescription", "type": "string"}, "is_hidden": {"title": "accountIsHidden", "type": "boolean"}}}, "Accounts": {"title": "accounts", "type": "array", "items": {"required": ["name", "description", "address", "is_hidden"], "properties": {"address": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "name": {"title": "accountName", "type": "string"}, "description": {"title": "accountDescription", "type": "string"}, "is_hidden": {"title": "accountIsHidden", "type": "boolean"}}}}, "HexString": {"title": "hexString", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}, "Keyfile": {"title": "keyfile", "type": "object", "properties": {"version": {"type": "number"}, "id": {"type": "string"}, "address": {"type": "string"}, "crypto": {"title": "crypto", "type": "object", "properties": {"ciphertext": {"type": "string"}, "cipherparams": {"type": "object", "properties": {"iv": {"title": "iv", "type": "string"}}}, "cipher": {"type": "string"}, "kdf": {"type": "string"}, "kdfparams": {"type": "object", "properties": {"dklen": {"title": "dklen", "type": "number"}, "salt": {"type": "string"}, "n": {"type": "number"}, "r": {"type": "number"}, "p": {"type": "number"}}}, "mac": {"type": "string"}}}}}, "Nonce": {"title": "nonce", "description": "A number only to be used once", "pattern": "^0x[a-fA-F0-9]+$", "type": "string"}, "Mnemonic": {"title": "mnemonic", "type": "string", "description": "a list of 24 words"}, "Passphrase": {"title": "passphrase", "description": "passphrase used to encode keyfile (recommend to use 8+ words with good entropy)", "type": "string"}, "Transaction": {"title": "transaction", "type": "object", "required": ["from", "to", "gas", "gasPrice", "nonce"], "properties": {"from": {"description": "Address of the sender", "title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "gas": {"title": "gas", "type": "string", "pattern": "^0x[a-fA-F0-9]+$", "description": "The gas limit provided by the sender in Wei"}, "gasPrice": {"title": "gasPrice", "type": "string", "pattern": "^0x[a-fA-F0-9]+$", "description": "The gas price willing to be paid by the sender in Wei"}, "data": {"title": "data", "type": "string", "pattern": "^0x[a-fA-F0-9]+$", "description": "The data field sent with the transaction"}, "nonce": {"title": "nonce", "description": "The total number of prior transactions made by the sender", "pattern": "^0x[a-fA-F0-9]+$", "type": "string"}, "to": {"description": "address of the receiver. null when its a contract creation transaction", "title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}, "value": {"description": "Value of Ether being transferred in Wei", "title": "wei", "type": "string", "pattern": "^0x[a-fA-F0-9]+$"}}}, "Wei": {"title": "wei", "type": "string", "description": "Hex representation of Wei", "pattern": "^0x[a-fA-F0-9]+$"}}, "contentDescriptors": {"Address": {"name": "address", "summary": "Account address", "required": true, "description": "hex-encoded 20 bytes public address", "schema": {"title": "address", "type": "string", "pattern": "^0x[a-fA-F\\d]{40}$"}}, "Additional": {"name": "additional", "summary": "additional params", "description": "additional list of parameters to define network or account specific options", "schema": {"title": "additionalParams", "type": "object", "properties": {"chain": {"title": "chain", "description": "chain name, by default etc, other possible variant morden.", "type": "string", "enum": ["etc", "morden"]}, "chain_id": {"title": "chainId", "description": "Chain id number, by default for mainnet it equals 61.", "type": "number"}, "show_hidden": {"title": "showHidden", "description": "show hidden accounts", "type": "boolean"}}}}, "Keyfile": {"name": "keyfile", "summary": "keyfile - secret storage", "description": "keyfile in json format that MUST comply with the [Web3 Secret Storage Definition](https://github.com/ethereumproject/wiki/wiki/Web3-Secret-Storage-Definition)", "schema": {"title": "keyfile", "type": "object", "properties": {"version": {"type": "number"}, "id": {"type": "string"}, "address": {"type": "string"}, "crypto": {"title": "crypto", "type": "object", "properties": {"ciphertext": {"type": "string"}, "cipherparams": {"type": "object", "properties": {"iv": {"title": "iv", "type": "string"}}}, "cipher": {"type": "string"}, "kdf": {"type": "string"}, "kdfparams": {"type": "object", "properties": {"dklen": {"title": "dklen", "type": "number"}, "salt": {"type": "string"}, "n": {"type": "number"}, "r": {"type": "number"}, "p": {"type": "number"}}}, "mac": {"type": "string"}}}}}}}}} ;
  public rpc: Client;
  public transport: HTTPTransport | WebSocketTransport;
  private validator: MethodCallValidator;
  private timeout: number | undefined;

  constructor(options: Options) {

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port} = options.transport;
    let path = options.transport.path || "";
    if (path && path[0] !== "/") {
        path = "/" + path;
    }
    switch (type) {
      case "http":
      case "https":
        this.transport = new HTTPTransport(type + "://" + host + ":" + port + path);
        break;
      case "websocket":
        this.transport = new WebSocketTransport("ws://" + host + ":" + port + path);
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([this.transport]));
    this.validator = new MethodCallValidator(JadeSignerJSONRPCAPI.openrpcDocument);
  }
  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
     this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
   public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[JadeSignerJSONRPCAPI.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[JadeSignerJSONRPCAPI.request]] will be added to the batch.
   * Once [[JadeSignerJSONRPCAPI.stopBatch]] is called, the promises for the [[JadeSignerJSONRPCAPI.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[JadeSignerJSONRPCAPI]] calls made since the last [[JadeSignerJSONRPCAPI.startBatch]] call. For
   * that reason, [[JadeSignerJSONRPCAPI.startBatch]] MUST be called before [[JadeSignerJSONRPCAPI.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  /**
   * Return the list of all not hidden (by default) accounts from the keystore
   */
  // tslint:disable-next-line:max-line-length
  public signer_listAccounts: SignerListAccounts = (...params) => {
    return this.request("signer_listAccounts", params);
  }

  /**
   * Hide an account from the list returned by default by `signer_listAccounts`
   */
  // tslint:disable-next-line:max-line-length
  public signer_hideAccount: SignerHideAccount = (...params) => {
    return this.request("signer_hideAccount", params);
  }

  /**
   * Show an account that was hidden before by the command `signer_hideAccount`
   */
  // tslint:disable-next-line:max-line-length
  public signer_unhideAccount: SignerUnhideAccount = (...params) => {
    return this.request("signer_unhideAccount", params);
  }

  /**
   * Creates a new account and stores it locally as a passphrase-encoded keystore file.
   */
  // tslint:disable-next-line:max-line-length
  public signer_newAccount: SignerNewAccount = (...params) => {
    return this.request("signer_newAccount", params);
  }

  /**
   * hashing and signing of typed structured data
   */
  // tslint:disable-next-line:max-line-length
  public signer_signTypedData: SignerSignTypedData = (...params) => {
    return this.request("signer_signTypedData", params);
  }

  /**
   * Signs transaction offline with private key from keystore file with given from address and passphrase.
   */
  // tslint:disable-next-line:max-line-length
  public signer_signTransaction: SignerSignTransaction = (...params) => {
    return this.request("signer_signTransaction", params);
  }

  /**
   * Import an account
   */
  // tslint:disable-next-line:max-line-length
  public signer_importAccount: SignerImportAccount = (...params) => {
    return this.request("signer_importAccount", params);
  }

  /**
   * Generate a mnemonic phrase
   */
  // tslint:disable-next-line:max-line-length
  public signer_generateMnemonic: SignerGenerateMnemonic = (...params) => {
    return this.request("signer_generateMnemonic", params);
  }

  /**
   * Import a mnemonic phrase
   */
  // tslint:disable-next-line:max-line-length
  public signer_importMnemonic: SignerImportMnemonic = (...params) => {
    return this.request("signer_importMnemonic", params);
  }

  /**
   * Export an account
   */
  // tslint:disable-next-line:max-line-length
  public signer_exportAccount: SignerExportAccount = (...params) => {
    return this.request("signer_exportAccount", params);
  }

  /**
   * Sign a message
   */
  // tslint:disable-next-line:max-line-length
  public signer_sign: SignerSign = (...params) => {
    return this.request("signer_sign", params);
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find(JadeSignerJSONRPCAPI.openrpcDocument.methods, ({name}) => name === methodName) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if ( openRpcMethodValidationErrors instanceof MethodNotFoundError || openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(params, _.map(methodObject.params, "name"));
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify(methodName, rpcParams);
    }
    return this.rpc.request(methodName, rpcParams, this.timeout);
  }

}
export default JadeSignerJSONRPCAPI;
